@using Common.Utils.Enums
@using static Common.Utils.Constant.Const
@{
    ViewData["Title"] = "Libros";

    var idRols = User.Claims.FirstOrDefault(x => x.Type == TypeClaims.IdRol).Value;
    bool isAdmin = idRols.Any(x => x.ToString() == Convert.ToInt32(Enums.RolUser.Administrador).ToString());
    bool isEstand = idRols.Any(x => x.ToString() == Convert.ToInt32(Enums.RolUser.Estandar).ToString());
}


    <h1>Listado de Libros</h1>
@{
    if (isAdmin || isEstand)
    {
        <p>
            <button class="btn btn-primary" onclick="nuevoLibro()">
                <i ></i> Nuevo libro
            </button>
         </p>
    }
}   

    <div class="row">

        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Nombre</th>
                    <th scope="col">Sinopsis</th>
                    <th scope="col">Numero de paginas</th>
                    <th scope="col">Autor</th>
                    <th scope="col">Editorial</th>
                    @{
                        if (isAdmin || isEstand)
                        {
                             <th scope="col">Opciones</th>
                        }
                     }
                </tr>
            </thead>

            <tbody id="cuerpoLibros"></tbody>
        </table>

    </div>


    @*modal*@
    <div class="modal fade" id="modalLibro" tabindex="1" role="dialog" aria-labelledby="modalLibroLabel" aria-hidden="true">

        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="idTitulomodalLibro">Crear libro</h5>
                </div>
                <div class="modal-body">
                    <form>

                        <div class="row">
                            <div class="col-md-6 form-group">
                                <label for="recipient-name" class="col-form-label">Nombre</label>
                                <input type="text" class="form-control" id="txtNameBook" placeholder="Nombre del libro" required>
                            </div>      
                             <div class="col-md-6 form-group">
                                <label class="control-label">Autor</label>
                                <select id="cmbAutor" class="form-control" onchange="seleccionarAutor()" required>
                                    <option> Seleccionar</option>
                                </select>
                            </div>
                        </div>

                        <div class="row">
                             <div class="col-md-6 form-group">
                                <label for="recipient-name" class="col-form-label">Numero de paginas</label>
                                <input type="number" class="form-control" id="txtNumberPages" placeholder="Cantidad de paginas" required>
                            </div>    
                            <div class="col-md-6 form-group">
                                <label class="control-label">Editorial</label>
                                <select id="cmbEditorial" class="form-control" onchange="seleccionarEditorial()" required>
                                    <option> Seleccionar</option>
                                </select>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-12 form-group">
                                <label for="recipient-name" class="col-form-label">Sinopsis</label>
                                <textarea class="form-control"
                                      id="txtSynopsis"
                                      required
                                      placeholder="Sinopsis del libro"
                                      maxlength="300">
                               </textarea>
                            </div>
                        </div>



                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal">
                        <i class="fas fa-window-close"></i>
                        Cancelar
                    </button>
                    <button type="button" class="btn btn-success" onclick="guardarBook()">
                        <i class="far fa-save"></i>
                        Guardar
                    </button>
                </div>
            </div>
        </div>
    </div>


<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script type="text/javascript" charset="utf-8">

    var listaBooks= [];
    var listaEditoriales = [];
    var listaAutores = [];

    let idEditorial='';
    let idBook='';
    let idAutor = '';
    let idAutorBook = '';

    $(document).ready(function () {

       getAllBooks();
       getEditoriales();
       getAutores();
    });

    function getAllBooks()
    {
        modalProcesando(true);
        $.ajax({
            url: '@Url.Action("getAllBooks", "Book")',
            method: 'GET',
            dataType: "json",
            success: function (data) {
                modalProcesando(false);

                //console.log("libros ",data);
                //validar que los datos que llegan son correctos
                if(data.isSuccess)
                {
                    listaBooks = data.result;
                    cargarGridBooks(listaBooks);
                    //IdAuthorBook = data.result.IdAuthorBook;
                    //console.log(listaBooks);

                }else{
                    Swal.fire(
                                'Opps!',
                                data.message,
                                'error');
                }       
               
            },
            error: function (xhr, textStatus, errorThrown) {
                    modalProcesando(false);
                    console.error(xhr, textStatus, errorThrown);
                }
         });
    }

    function cargarGridBooks(data){
        
        console.log(data);
        $("#cuerpoLibros").html("");
        for(var i=0; i<data.length; i++){
            var tr=`
             <tr>
                <th>`+ data[i].name+ `</th>
                <th> `+ data[i].synopsis +`</th>
                <th> `+ data[i].numberPages +`</th>
                <th> `+ data[i].author +`</th>
                <th> `+ data[i].editorial +`</th>
                <td>
                 @{
                      if (isAdmin || isEstand){
                             <button  class="btn btn-warning" onclick="editarBook(`+ data[i].id +`)"><i class="fas fa-edit"></i> Editar</button>
                             <button class="btn btn-danger" onclick="eliminarBook(`+ data[i].id +`)"><i class="far fa-trash-alt"></i> Eliminar</button>
                         }
                }  
                </td>
            </tr>
            `;
            $("#cuerpoLibros").append(tr);
        }
    }

    function eliminarBook(idBook)
    {
        console.log("mandó a eliminar", idBook);
        Swal.fire({
            title: '¿Confirmar Eliminacion?',
            text: "No podrás revertir esto.!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            cancelButtonText: 'Cancelar',
            confirmButtonText: 'Si, Eliminar!',
        }).then((result) => {
            if (result.isConfirmed) {
                modalProcesando(true);
                //petición
                $.ajax({
                    url: '@Url.Action("DeleteBook", "Book")',
                    method: 'DELETE',
                    data:{
                        idBook:idBook
                    },
                    dataType: "json",
                    success: function (data) {
                        console.log("mandó a eliminar", idBook);
                        modalProcesando(false);
                        console.log(data);

                        if (data.isSuccess){ 

                            listaBooks=listaBooks.filter(x=>x.id!=idBook);
                            cargarGridBooks(listaBooks);
                            Swal.fire(
                                'Eliminado!',
                                data.message,
                                'success');
                        }else{
                            Swal.fire(
                                'Error!',
                                data.message,
                                'error');
                        }
                     },
                     error: function (xhr, textStatus, errorThrown) {
                         modalProcesando(false);
                         console.error(xhr, textStatus, errorThrown);
                     }
                  });
                }
            });
        }

    function nuevoLibro(){

        limpiarForm();
        if(listaEditoriales.length==0){
            getEditoriales();
        }
        $('#idTitulomodalLibro').html("Crear Libro");
        $('#modalLibro').modal({keyboard:true});
    }

    function getEditoriales()
    {
        modalProcesando(true);
        $.ajax({
            url: '@Url.Action("GetAllEditorials", "Editorial")',
            method: 'GET',
            dataType: "json",
            success: function (data) {

                modalProcesando(false);
                listaEditoriales = data.result;         
                cargarEditoriales(listaEditoriales);
            },
            error: function (xhr, textStatus, errorThrown) {
                    modalProcesando(false);
                    console.error(xhr, textStatus, errorThrown);
                }
         });
    }

    function getAutores()
    {
        modalProcesando(true);
        $.ajax({
            url: '@Url.Action("GetAllAuthors", "Author")',
            method: 'GET',
            dataType: "json",
            success: function (data) {

                //console.log(data);
                modalProcesando(false);
                listaAutores = data.result;           
                cargarAutores(listaAutores);
            },
            error: function (xhr, textStatus, errorThrown) {
                    modalProcesando(false);
                    console.error(xhr, textStatus, errorThrown);
                }
         });
    }

    function cargarEditoriales(data, selected) 
    {
        $("#cmbEditorial").empty();
        $("#cmbEditorial").append('<option value="" disabled selected>Seleccione una editorial</option>');
        $.each(data, function (i, lista) {
            if (data[i].id == selected) {
                $("#cmbEditorial").append('<option value="' + data[i].id + '"selected>' + data[i].name + '</option>');
            }
            else {
                $("#cmbEditorial").append('<option value="' + data[i].id + '">' + data[i].name + '</option>');
            }
        });
    }

    function cargarAutores(data, selected) {

        $("#cmbAutor").empty();
        $("#cmbAutor").append('<option value="" disabled selected> Seleccione un autor </option>');
        $.each(data, function (i, lista) {
            if(data[i].id == selected) {
                $("#cmbAutor").append('<option value="' + data[i].id + '"selected>' + data[i].name + '</option>');
            }
            else {
                $("#cmbAutor").append('<option value="' + data[i].id + '">' + data[i].name + '</option>');
            }
        });
    }

    function guardarBook(){
        if(validarForm())
        {
            let parametro={
                Name:$("#txtNameBook").val(),
                Synopsis:$("#txtSynopsis").val(),
                NumberPages:$("#txtNumberPages").val(),
                idEditorial:idEditorial,
                idAuthor:idAutor,
            };

            if(idBook == '')
            {
                limpiarForm();
                modalProcesando(true);
                $.ajax({
                    url: '@Url.Action("InsertBook", "Book")',
                    method: 'POST',
                    data:parametro,
                    dataType: "json",
                    success: function (data) {

                        console.log(data);
                        modalProcesando(false);
                        console.log(listaBooks);
                        if (data.isSuccess){

                            $('#modalLibro').modal('hide');
                            limpiarForm();
                            toastMessage('success','Libro guardado exitosamente!');
                            getAllBooks();

                        }else{
                             toastMessage('error','Hubo un error al guardar, por favor intentarlo nuevamente!');
                        }
                    },
                    error: function (xhr, textStatus, errorThrown) {
                            modalProcesando(false);
                            toastMessage('error','Hubo un error al guardar, por favor intentarlo nuevamente!');
                            console.error(xhr, textStatus, errorThrown);
                        }
                 });
            }else{

                //parametro.Id = idBook; 
                parametro.IdAuthorBook = idAutorBook;

                modalProcesando(true);
                $.ajax({
                    url: '@Url.Action("UpdateBook", "Book")',
                    method: 'PUT',
                    data:parametro,
                    dataType: "json",
                    success: function (data) {

                        modalProcesando(false);
                        console.log(listaBooks);
                        if (data.isSuccess){

                            $('#modalLibro').modal('hide');
                            limpiarForm();
                            toastMessage('success','Libro actualizado exitosamente!');
                            getAllBooks();

                        }else{
                             toastMessage('error','Hubo un error al guardar, por favor intentarlo nuevamente!');
                        }
                    },
                    error: function (xhr, textStatus, errorThrown) {
                            modalProcesando(false);
                            toastMessage('error','Hubo un error al guardar, por favor intentarlo nuevamente!');
                            console.error(xhr, textStatus, errorThrown);
                        }
                 });
            }
        }
    }

    function validarForm()
    {
        if($("#txtNameBook").val()=='')
        {
                $("#txtNameBook").focus();
                toastMessage('warning','El nombre es obligatorio.');
                return false;
        }
        if($("#txtSynopsis").val().trim()=='')
        {
                $("#txtSynopsis").focus();
                toastMessage('warning','La sinopsis es obligatoria.');
                return false;
        }
        if($("#txtNumberPages").val()=='')
        {
                $("#txtNumberPages").focus();
                toastMessage('warning','El numero de paginas es obligatorio.');
                return false;
        }
        if(idEditorial=='')
        {
                $("#cmbEditorial").focus();
                toastMessage('warning','La editorial es obligatoria.');
                return false;
        }
        if(idAutor=='')
        {
                $("#cmbAutor").focus();
                toastMessage('warning','El autor es obligatorio.');
                return false;
        }
        return true;
    }

    function limpiarForm()
    {
       $("#txtNameBook").val('');
       $("#txtSynopsis").val('');
       $("#txtNumberPages").val('');

       idEditorial='';
       idBook='';
       idAutor = '';
       cargarEditoriales(listaEditoriales);
       cargarAutores(listaAutores);
    }

    function seleccionarEditorial()
    {
        var combo = document.getElementById("cmbEditorial");
        let selected = combo.options[combo.selectedIndex].value;
        //let text = combo.options[combo.selectedIndex].text;
        idEditorial = selected;
    }

    function seleccionarAutor()
    {
        var combo = document.getElementById("cmbAutor");
        let selected = combo.options[combo.selectedIndex].value;
        //let text = combo.options[combo.selectedIndex].text;
        idAutor = selected;
    }

    function editarBook(id)
    {
        idBook = id;

        let book = listaBooks.find(x=>x.id == idBook);
         
        idEditorial = book.idEditorial;
        idAutor = book.idAuthor;
        numberPages = book.numberPages;
        sinopsis = book.sinopsis;
        idAutorBook = book.idAuthorBook;

        //asignar los valores a los comboBox
        $('#txtNameBook').val(book.name);
        $('#txtSynopsis').val(book.synopsis);
        $('#txtNumberPages').val(book.numberPages);

        cargarEditoriales(listaEditoriales, book.idEditorial);
        cargarAutores(listaAutores, idAutor);

        $('#idTitulomodalLibro').html("Editar Libro");
        $('#modalLibro').modal({keyboard:true});
    }
</script>

